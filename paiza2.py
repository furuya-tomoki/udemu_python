 if else文の基本形

# coding: utf-8
# if文による条件分岐
number = 1
if number == 1:
    print( "スキ！")  #条件式が成立したときの処理
else:
    print( "キライ")  #条件式が成立しなかったときの処理
    
     インデント
コードの行頭を字下げすることを「インデント」といいます。
Pythonでは、１段のインデントに、タブか半角スペース4つを入力します。

インデントは、Python では、条件式が成立した時に実行する処理を表すと同時に、
プログラマーにとって、条件式に応じて実行する処理を見分けやすくします。

Pythonでは、条件式のあとの「:」(コロン)やelseのあとの「:」(コロン)から始まって、
インデント行が終わるまでを、ひとかたまりのブロックとして扱います。

 作ったプログラムをスキ/キライ占いにしてみる方法
このチャプターで作ったプログラムに
randomモジュールをインポートしたあと、
n = 1 としているところを
n = random.randint(1,2) とすると
コードの実行毎にランダムで結果が変わるスキ/キライ占いが作れます！

 if elif else文の基本形

# coding: utf-8
# if文による条件分岐
number = 1
if 条件式1:
    print( "スキ！")  #条件式1が成立したときの処理
elif 条件式2:
    print( "どちらでもない")  #条件式2が成立したときの処理
else:
    print( "キライ")  #条件式がどれも成立しなかったときの処理
    
     if elif else文の基本形

# coding: utf-8
# if文による条件分岐
number = 1
if 条件式1:
    print( "スキ！")  #条件式1が成立したときの処理
elif 条件式2:
    print( "どちらでもない")  #条件式2が成立したときの処理
else:
    print( "キライ")  #条件式がどれも成立しなかったときの処理
    
    利用例	意味	真になる例
a < b	a が b よりも小さい	10 < 15
a > b	a が b よりも大きい	10 > 7
a <= b	a が b 以下である	10 <= 15
a >= b	a が b 以上である	10 >= 7
a != b	a と b が等しくない	10 != 1

print関数で改行したくない場合
print関数で改行したくない場合、ひとつの方法は、文字列を「,」で区切ります。
この場合、出力された文字列は、スペースで区切られます。


print("<h1>hello world</h1>", "<p>世界の皆さん、", "<b>こんにちは</b></p>")


もうひとつの方法は、カッコの中に「, end=""」を追加します。

print("<h1>hello world</h1>", end="")
print("<p>世界の皆さん、", end="")
print("<b>こんにちは</b></p>", end="")

 if elif else文の基本形

# coding: utf-8
# if文による条件分岐
number = 1
if 条件式1:
    print( "スキ！")	#条件式1が成立したときの処理
elif 条件式2:
    print( "どちらでもない")	#条件式2が成立したときの処理
else:
    print( "キライ")	#条件式がどれも成立しなかったときの処理
    
    利用例	意味	真になる例
a < b	a が b よりも小さい	10 < 15
a > b	a が b よりも大きい	10 > 7
a <= b	a が b 以下である	10 <= 15
a >= b	a が b 以上である	10 >= 7
a != b	a と b が等しくない	10 != 1

デバッグとは
デバッグ (debug) とは、プログラムの不具合・欠陥を発見および修正し、
正常に動作させるための作業全般のことです。このような、プログラム上の
不具合・欠陥をバグ(bug)と呼びます。

動画の中では、デバッグとして、
randint関数で何の値がomikuji変数に代入されたかを出力して、
omiokuji変数の値に対して、if文が期待通りに動いているか確認しています。

 if elif else文の基本形

# coding: utf-8
# if文による条件分岐
number = 1
if 条件式1:
    print( "スキ！")	#条件式1が成立したときの処理
elif 条件式2:
    print( "どちらでもない")	#条件式2が成立したときの処理
else:
    print( "キライ")	#条件式がどれも成立しなかったときの処理
    
# coding: utf-8
# 西暦年から平成年を求める
import datetime
seireki = datatime.data,today().year
print("西暦" + str(seireki) + "年は、",end="")
# 平成年から西暦年を求めるには、平成年に「1988」を足します
# 　例)
# 　平成1年に「1988」を足すと、1989 > 平成1年は1989年。
# 　平成2年に「1988」を足すと、1990 > 平成2年は1990年。
# 　平成3年に「1988」を足すと、1990 > 平成3年は1991年。

# 西暦年から平成年を求めるには、これとは逆に、西暦年から「1988」を引きます。
# 　例)
# 　西暦1989年から「1988」を引くと、1 > 1989年は平成1年。
# 　西暦1990年から「1988」を引くと、2 > 1990年は平成2年。
# 　西暦1991年から「1988」を引くと、3 > 1991年は平成3年。

print("平成" + str(heisei) + "年です。")